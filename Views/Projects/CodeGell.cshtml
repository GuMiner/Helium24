@using System;
@using Helium24.Models;

@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<Project>
@model Helium24.Models.Project

@{
    Layout = "Layouts/RootLayout.cshtml";
}

@section Title {@Model.Title}

<div class="card">
    @Html.Partial("Projects/Common/CardHeader.cshtml", Model)
    <div class="card-body">
        <h3 class="text-muted">About</h3>
        @Html.Partial("Common/ParagraphStart.cshtml")
        <b>@Model.Title</b> project tests if real-time CSG generation with volumetric texture map creation is feasible for use
        within a computer game. Overall, while performance was acceptable rendering one object,
        the resulting application would not be scalable for use within a production computer game.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ImageCard.cshtml",
            new Image("/Blobs/Projects/CodeGell/checkerboard volumetric texture shaded.png", "A volumetrically-rendered checkerboard"))
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
        <b>@Model.Title</b> uses a <a href="https://github.com/GuMiner/Surface-Netgen-Fork">modified version</a> of the
        <a href="http://sourceforge.net/projects/netgen-mesher/">Netgen library</a>, which I had stripped-down
        to only generate triangles, surface meshes, and overall improve performance and usability for realtime operations.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        @Html.Partial("Common/ParagraphStart.cshtml")
        When <b>@Model.Title</b> is given a description of an object, it will send it through my Netgen variant to determine the
        triangles forming the object's mesh, put the triangles on a texture image, and fill the texture using an appropriate volumetric
        voxel texture. With this process, <b>@Model.Title</b> renders in real-time object <i>cuts</i> and <i>holes</i> instead of the <i>object itself</i> in
        a traditional computer game rendering engine.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ImageCard.cshtml",
            new Image("/Blobs/Projects/CodeGell/Triangle ID texture shaded.png", "CSG from Netgen, without volumetric textures."))
        <h3 class="text-muted">Software</h3>
        @Html.Partial("Common/ParagraphStart.cshtml")
        <b>@Model.Title</b> uses modern OpenGL 4.0 rendering, along with <a href="http://glew.sourceforge.net/">GLEW</a>,
        <a href="https://github.com/GuMiner/Surface-Netgen-Fork">Surface-Netgen-Fork</a>, and <a href="http://www.glfw.org/index.html">GLFW3</a>.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        @Html.Partial("Common/ParagraphStart.cshtml")
        For more information, see the source code on <a href="https://github.com/GuMiner/Volumetric-CSG-Texture-Mapping">GitHub</a>.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ImageCard.cshtml",
            new Image("/Blobs/Projects/CodeGell/Watermelon volumetric texture shaded.png", "\"Watermellon\" volumetric texture shaded object."))
        <br />
        @Html.Partial("Common/ImageCard.cshtml",
            new Image("/Blobs/Projects/CodeGell/High-Res fragment shaded.png", "Volumetric fragment-shared object."))
    </div>
</div>
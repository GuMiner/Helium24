@using System;
@using Helium24.Models;

@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<Project>
@model Helium24.Models.Project

@{
    Layout = "Layouts/RootLayout.cshtml";

    string generalError = "generalError";
    string contentHolder = "contentHolder";
}

@section Title {@Model.Title}

<div class="card">
    @Html.Partial("Projects/Common/CardHeader.cshtml", Model)
    <div class="card-body">
        <div class="alert-warning" id="@generalError" role="alert"></div>
        <div class="row justify-content-center">
            <div class="col text-muted" >
                <i>Rendered content from <a href="@Model.ProjectUri">@Model.ProjectUri</a></i>
            </div>
        </div>
        <div id="@contentHolder"></div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript" src="~/Content/es6-promise-auto-4.2/es6-promise.auto.min.js"></script>
    <script type="text/javascript" src="~/Content/axios-0.17/axios.min.js"></script>

    <!-- Given a markdown page, dynamically render it! -->
    <script type="text/javascript">

        function ReplaceLinks(line)
        {
            var linkIndex = line.indexOf("](");
            while (linkIndex != -1)
            {
                var startIndex = line.lastIndexOf("[", linkIndex);
                var endIndex = line.indexOf(")", linkIndex);
                
                var htmlLink = line.substring(linkIndex + 2, endIndex);
                var linkText = line.substring(startIndex + 1, linkIndex);
                line = line.substring(0, startIndex) + '<a href="' + htmlLink + '">' + linkText + '</a>' + line.substring(endIndex + 1);
            
                linkIndex = line.indexOf("](");
            }

            return line;
        }

        function IsListItem(line)
        {
            return line.startsWith("*");
        }

        $(document).ready(function () {

            // Load POI types and populate the first listing of POI types
            axios.get('@Model.ProjectUri')
                .then(function (response) {
                    var data = response.data;

                    $("#@contentHolder").html(function (n) {
                        return data;
                    })

                    // Inefficient v1
                    var markdown = new Array();
                    var currentLine = "";
                    var inList = false;

                    for (var i = 0; i < data.length; i++)
                    {
                        switch(data[i])
                        {
                            case '\n':
                                if (currentLine.startsWith("==") && currentLine.endsWith("==")) {
                                    markdown[markdown.length - 1] = "<h2 class=\"text-muted\">" + markdown[markdown.length - 1] + "</h2>";
                                } else if (currentLine.startsWith("--") && currentLine.endsWith("--")) {
                                    markdown[markdown.length - 1] = "<h3 class=\"text-muted\">" + markdown[markdown.length - 1] + "</h3>";
                                } else {
                                    currentLine = ReplaceLinks(currentLine);

                                    var isListItem = IsListItem(currentLine)
                                    if (inList && !isListItem) {
                                        markdown.push("</ul>")
                                        inList = false
                                    } else if (!inList && isListItem) {
                                        markdown.push("<ul>")
                                        inList = true
                                    }

                                    if (isListItem) {
                                        currentLine = "<li>" + currentLine.substring(2) + "</li>";
                                    } else {
                                        currentLine += "<br />";
                                    }
                                    markdown.push(currentLine);
                                }

                                currentLine = "";
                                break;
                            default:
                                currentLine += data[i];
                                break;
                        }
                    }

                    $("#@contentHolder").html(function (n) {
                        return markdown.join("\n");
                    })
                })
                .catch(function (response) {
                    $("#@generalError").text(response.message);
                });
        });
    </script>
}
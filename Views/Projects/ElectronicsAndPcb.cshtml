@{
    String projectName = "Mill Board Electronics & PCB";
    Layout = "Layouts/RootLayout.cshtml";
}

@section Title {@projectName}

@section StyleSheets {
    <link rel="stylesheet" href="~/Content/ProjectStyles.css">
}

<div id="body">
    
    <h2>@projectName</h2>
    <p>
        The <b>@projectName</b> project was initially to create a low-cost, custom electronics board capable of driving six stepper motors.
        Because my mill design was unusual in requiring six stepper motors, currently-available boards such as the <a href="https://ultimachine.com/ramps">RAMPS board</a>
        and <a href="http://reprap.org/wiki/Comparison_of_Electronics">other electronics</a> were not be capable of driving my mill.
    </p>
    <h4>Other Objectives</h4>
    <p>
        This project was my first time in purchasing a prototyped PCB (from <a href="https://oshpark.com/">OSH Park</a>) 
        and designing a PCB from the schematic. In addition, this project allowed me to experiment with
        reading a 12-pin keypad and driving a 128x64 LCD display -- in addition to six stepper motors -- all from an 
        <a href="http://www.atmel.com/devices/ATMEGA328P.aspx">ATmega328P-PU microcontroller</a>.
    </p>
    <h3>Electronics Design</h3>
    <p>
        I started the electronics design by breadboarding each key component -- the stepper motor drivers, LCD display, and <a href="http://www.nxp.com/documents/data_sheet/74HC_HCT595.pdf">serial-to-parallel</a> chips.
        All of these were prototyped using a <a href="http://www.netduino.com/netduinoplus2/specs.htm">netduino plus 2</a>, which is easier to work with compared to 
        an <a href="http://www.atmel.com/devices/ATTINY85.aspx">ATtiny85</a>.
        <br />
        After that, I determined the total number of pins needed for I/O:
    </p>
    <ul class="subbox">
        <li>Six <a href="https://www.pololu.com/product/1182">stepper motor drivers</a>: 1 (reset) + 6*2 (direction + step) = 13 (output)</li>
        <li>Drill Bit PWM: 1 (speed selection) = 1 (output)</li>
        <li>Drill Bit PWM speed indicator: 1 (actual drill bit speed) =  1 (input)</li>
        <li>12-button keypad: 1 (current button press value) =  1 (analog input)</li>
        <li>General-purpose potentiometer: 1 (current dial value) =  1 (analog input)</li>
        <li>Computer input line: 1 (data input) = 1 (input)</li>
        <li>128x64 display: 8 (data lines) + 2 (chip selection) + 3 (reset / clock / command (or) data) = 13 (output) </li>
        <li><b>Total:</b> 13 + 1 + 1 + 1 + 1 + 1 + 13 = 31</li>
    </ul>
    <p>
        Because using 30 pins would require a more expensive chip than the ATmega, I decided instead to use two of the serial-to-parallel chips to drive the 128x64 LCD display. 
        Those chips drove the total pin count down to <b>22</b>, and also allowed me to add two more status LEDs and three optional outputs on the unused pins of the last serial chip.
        <br />
        Finally, I drew the schematic in KiCad as displayed below:
    </p>
    <div>
        <img class="largeImage" src="~/Content/Projects/ElectronicsAndPcb/Schematicv3.png" />
    </div>
    <br />
    <b>Final electronics schematic design.</b>
    <p>
        This design has other interesting points worth mentioning:
    </p>
    <ul class="subbox">
        <li>Each stepper motor driver has two headers -- one to swap out the motor, the other to swap out the driver. </li>
        <li>Each stepper motor driver has it's own transient protection capacitor on the 12 V line.</li>
        <li>The ATmega has additional passive components to reduce the noise on the analog reference 5 V line.</li>
        <li>The keypad uses a resistor network to uniquely idenfity each key (which creates a short on two if its pins), so significantly reduce the pin count to 1.</li>
    </ul>
    <h3>PCB Design</h3>
    <p>
        After drawing out the schematics, I selected (or created) pad layouts for each of the components in my design. Thankfully, KiCad comes with several built-in pad
        layouts, so I only had to draw pads for the stepper motor drivers and 128x64 display.
        <br />
        I then went through several iterations of designing the board layout, in order to minimize the board layout while also keeping the traces at a reasonable size and
        without too much messiness.
    </p>
    <div class="content-wrapper">
        <article>
            <img class="imgScaler" src="~/Content/Projects/ElectronicsAndPcb/Mill PCB Version 1 (116).png" width="500"/>
        </article>
        <projectAside>
            This was the first layout that I started, and scrapped rather quickly. This layout was mostly for experimentation in hooking up the stepper motor drivers and display-to-serial traces.
        </projectAside>
    </div>
    <div class="content-wrapper">
        <article>
            <img class="imgScaler" src="~/Content/Projects/ElectronicsAndPcb/mill board v2.png" width="500" />
        </article>
        <projectAside>
            My second layout I managed to route everything, but at the expense of much messiness, empty board space, and having the display and keypad at right-angles to each other.
        </projectAside>
    </div>
    <p>
        For the final layouts, I determined that I could go with a smaller signal trace size, which allowed me to route traces in-between pins. 
    </p>
    <div class="content-wrapper">
        <article>
            <img class="imgScaler" src="~/Content/Projects/ElectronicsAndPcb/mill board  v3 no bottom area.png" width="700" />
        </article>
        <tinyAside>
            My third board I was able to reach a much smaller footprint, but without using a lot of the board space underneath the stepper motor drivers. The board also
            didn't look that great when I added a ground plane.
        </tinyAside>
    </div>
    <div class="content-wrapper">
        <article>
            <img class="imgScaler" src="~/Content/Projects/FinalBoard.png" width="700" />
        </article>
        <tinyAside>
            My final board (with ground plane) ended up looking a bit messier, but was extreemely compact and rather inexpensive to prototype a minimal order of 3, 2-layer ENIG boards (~$50 total).
        </tinyAside>
    </div>
    <p>
        After about a month of lead time, I received up with my boards:
        <br />
        <div>
            <img class="mediumImage" src="~/Content/Projects/ElectronicsAndPcb/WP_20150227_001.jpg" />
            <img class="mediumImage" src="~/Content/Projects/ElectronicsAndPcb/WP_20150227_002.jpg" />
        </div>
    </p>
    <h3>Testing</h3>
    <p>
        I went through two main phases testing these boards -- mechanical design, and electrical design. Overall, there were no <b>Critical</b> errors that made the board
        useless, so the entire project was a success!
    </p>
    <div class="subbox">
        <h4>Mechanical Design Errors</h4>
        <ul>
            <li>Major: The stepper-motor sockets were all 1-pin spaced too far apart (oops). Pins fit when bent.</li>
            <li>Minor: The capacitor pads were too small, so all the capacitors were placed sideways.</li>
            <li>Minor: The LCD covers the backlight pads -- which was OK, because I wasn't planning on using the backlight.</li>
            <li>Minor: I used the wrong sized-pads for the keypad, so it only accepts smaller pin sizes -- such as the pin sizes the keypad has.</li>
        </ul>
    </div>
    <div class="subbox">
        <h4>Electrical Design Errors</h4>
        <p>
            I haven't been able to find any -- I haven't needed to add jumpers, scratch out traces, or do any sketchy stuff to get this project working electrically.
        </p>
        <img class="mediumImage" src="~/Content/Projects/ElectronicsAndPcb/WP_20150415_001.jpg" />
    </div>
</div>

@section Scripts{
}
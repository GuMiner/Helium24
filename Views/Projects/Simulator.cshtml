@using System;
@using Helium24.Models;

@{
    String projectName = "Simulator";
    Layout = "Layouts/RootLayout.cshtml";

    Tag[] tags = new Tag[] { Tag.Software, Tag.Simulation };
    ProjectHeader header = new ProjectHeader(projectName, "April 2015", tags);
}

@section Title {@projectName}

@section StyleSheets {
    <link href="~/Content/katex-0.9/katex.min.css" rel="stylesheet" />
}

<div class="card">
    @Html.Partial("Common/CardHeader.cshtml", header)
    <div class="card-body">
        @Html.Partial("Common/ParagraphStart.cshtml")
            The terribly-named <b>@projectName</b> project was started to investigate a number of technologies.
            Primarily, I wanted to determine the difference between modern OpenGL and modern DirectX, so I wrote this application as a C++ DirectX Windows Modern Application.
            Secondarily, I had previously programmed an electromagnetic simulator that did not take into account the speed of light, 
            so I wanted to attempt creating a more realistic small-scale electromagnetic simulation.
            Finally, I was interested in seeing how creating a full-screen Windows Modern Application would be different than a desktop OpenGL / DirectX application.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <h3 class="text-muted">Mathematics</h3>
        @Html.Partial("Common/ParagraphStart.cshtml")
            To test all of these technologies, I decided to not simulate quantum mechanics and only simulate point particles.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
            With my previous simulator, I had used <i>Lorentz's Force Law</i> in combination with <i>Newton's Second Law</i> to simulate particle motion, and roughly approximate the electric
            and magnetic fields from the particle positions and velocities.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        @Html.Partial("Common/EquationCard.cshtml",
            new Equation(@"\vec{F}=q(\vec{E} + \vec{v}\times\vec{B})", 
                "1. Lorentz's Force Law for a point charge <br /> in an electric and a magnetic field."))
        <br />
        @Html.Partial("Common/EquationCard.cshtml",
            new Equation(@"\vec{F}=m\vec{a}", "2. Newton's Second Law"))
        <br />
        @Html.Partial("Common/EquationCard.cshtml",
            new Equation(@"\vec{E(r)}=\frac{1}{4\pi\epsilon_0}\sum\limits_{i}\frac{q_i}{R^2}\hat{R}",
                @"3. The steady-state electric field at \(r\) given \(\vec{R}\) <br />(the vector from a point charge to your point \(r\)) <br /> summed over all particles."))
        <br />
        @Html.Partial("Common/EquationCard.cshtml",
            new Equation(@"\vec{B(r)}=\frac{\mu_0}{4\pi}\sum\limits_{i}\frac{q_i\vec{v_i}\times\hat{R_i}}{R_i^2}",
                @"4. The steady-state magnetic field at \(r\) given \(\vec{R}\), summed over all particles."))
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
            However, these approximates above don't account for the time that it takes for changes in a particle's position to be visible to other particles, because
            information only travels at the speed of light. These approximate equations above are only correct for non-relativistic, steady-state situations.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        @Html.Partial("Common/ParagraphStart.cshtml")
            For this simulation, I used a (less approximate) equation from my E&M course 
            and stored the history of each particle's motion so that time effects could be properly considered. By setting \(\vec{u}=c\hat{R}-\vec{v}\), the following equations were used:
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/EquationCard.cshtml",
            new Equation(@"\vec{E(r,t)}=\frac{1}{4\pi\epsilon_0}\sum\limits_{i}\frac{q_iR_i}{(\vec{R_i}\cdot\vec{u_i})^3}((c^2-v_i^2)\vec{u_i}+\vec{R_i}\times(\vec{u_i}\times\vec{a_i}))",
                @"5. The same as #3, but where the vector \(\vec{R}\) <br /><i>accounts for when the particle was given the light speed delay</i>"))
        <br />
        @Html.Partial("Common/EquationCard.cshtml",
            new Equation(@"\vec{B(r,t)}=\frac{1}{c}\hat{R}\times\vec{E(r,t)})",
                @"6. The magnetic field, calculated using the electric field from #5."))
        @Html.Partial("Common/ParagraphStart.cshtml")
        <span class="text-muted">
            For the physicists out there I didn't add the <i>Abraham-Lorentz</i> force to these equations because -- as expected -- the particles spontaneously accelerates when done so.
        </span>
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        <h3 class="text-muted">Results</h3>
        @Html.Partial("Common/ImageCard.cshtml",
            new Image("/Blobs/Projects/Simulator/Simulator.png", "All-in-one screenshot of two orbiting charged particles."))
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
            In terms of the software, this screenshot shows:
            <ul>
                <li>Geometry-shader generated arrows</li>
                <li>The usage of both Direct2D and Direct3D to draw info text.</li>
                <li>A fullscreen Windows Modern App</li>
            </ul>
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
        In terms of the simulation, this screenshot also shows the electromagnetic waves being propagated over time, as expected.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
        Surprisingly, I found programming in modern DirectX to be extremely similar to programming in modern OpenGL. In both cases, you load shaders, setup the data format for the shaders,
        load a vertex buffer with triangles, and batch render through the shaders. Even the shading languages (HLSL/GLSL) are very much C-like, with minor differences.
        Overall, if you know how to do vertex-array-based OpenGL or DirectX programming, you'll be able to transition into using the other language very, very quickly.
        @Html.Partial("Common/ParagraphEnd.cshtml")
    </div>
</div>

@section Scripts{
<script type="text/javascript" src="~/Content/katex-0.9/katex.min.js"></script>
<script type="text/javascript" src="~/Content/katex-0.9/contrib/auto-render.min.js"></script>

<script type="text/javascript">
    renderMathInElement(document.body);
</script>
}
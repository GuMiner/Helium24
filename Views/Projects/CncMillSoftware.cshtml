@using System;
@using Helium24.Models;

@{
    String projectName = "Pro CNC 3020 Software";
    Layout = "Layouts/RootLayout.cshtml";

    Tag[] tags = new Tag[] { Tag.Hardware, Tag.Software, Tag.LaserMill };
    ProjectHeader header = new ProjectHeader(projectName, "May 2015", tags);
}

@section Title {@projectName}

<div class="card">
    @Html.Partial("Common/CardHeader.cshtml", header)
    <div class="card-body">
        <h3 class="text-muted">Hardware</h3>
        @Html.Partial("Common/ParagraphStart.cshtml")
            After experimentation with my own CNC milling hardware, I decided to instead purchase a 3020-aluminum based CNC <i>engraver.</i>
            This relatively-inexpensive device was sufficiently sturdy to repurpose as a <i>mill</i>, for low-hardness materials.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ImageCard.cshtml",
            new Image("/Blobs/Projects/CncMillSoftware/Mill.jpg", "Pro CNC 3020 4-axis mill"))
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
        I found the hardware overall to be fairly sturdy, with stepper motors driving lead screws to move the x, y, and z axis.
        Each stepper motor micro-step moves each axis 0.00254 mm (2.54 µm) -- which probably means this device was designed around Imperial standards,
        because that nicely translates to 0.1 mils (1000 mils = 1 inch) per micro-step. By default, each stepper motor runs at 16x micro stepping,
        with 1600 steps per axis revolution.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        @Html.Partial("Common/ParagraphStart.cshtml")
            In practice, this device isn't nearly that accurate, but it's nice to see the limitation is not in the control hardware.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        <h3 class="text-muted">Software</h3>
        @Html.Partial("Common/ParagraphStart.cshtml")
            The software that came with the device required both Windows XP and a Parallel port.
            Having neither, I decided to write my own using the microcontrollers I had on hand.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ImageCard.cshtml",
            new Image("/Blobs/Projects/CncMillSoftware/MillMisspelling.jpg", "I didn't have a parakkel port either."))
        @Html.Partial("Common/ParagraphStart.cshtml")
            With those microcontrollers, I wrote the following:
        @Html.Partial("Common/ParagraphEnd.cshtml")
        @Html.Partial("Common/ImageCard.cshtml",
            new Image("/Blobs/Projects/CncMillSoftware/V1Results.jpg", "Netduino (C#)"))
        @Html.Partial("Common/ParagraphStart.cshtml")
            <b>Version 1:</b> This initial software verified that I could drive the mill, at a pitifully slow speed.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ImageCard.cshtml",
            new Image("/Blobs/Projects/CncMillSoftware/V2Results.jpg", "Raspberry PI (C)"))
        @Html.Partial("Common/ParagraphStart.cshtml")
        <b>Version 2:</b> This software worked excellently -- until the Raspberry PI had software interrupts which caused stuttering.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
        <b>Version 3:</b> I tried writing code for the Parallax Propeller, which was even <i>slower</i> than the Netduino -- too slow to be usable.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ImageCard.cshtml",
            new Image("/Blobs/Projects/CncMillSoftware/V4Results.jpg", "Arduino Nano (GRBL)"))
        @Html.Partial("Common/ParagraphStart.cshtml")
        <b>Version 4:</b> I stopped trying to reinvent the wheel and bought an Arduino Nano and installed <a href="https://github.com/grbl/grbl/wiki">GRBL</a> on it.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
            Unfortunately, the Arduino Nano is significantly more sensitive to voltage transients when running the
            mill spindle. I have to run the mill at a slow feedrate and spindle rate to avoid resetting the device.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        @Html.Partial("Common/ParagraphStart.cshtml")
            However, I'm able to run at a reasonable rate, unlike the Netduinio, Parallax Propeller, or Raspberry PI.
        @Html.Partial("Common/ParagraphEnd.cshtml")
    </div>
</div>
@using System;
@using Helium24.Models;

@{
    String projectName = "Quantum Computing";
    Layout = "Layouts/RootLayout.cshtml";

    Tag[] tags = new Tag[] { Tag.Software, Tag.Simulation };
    ProjectHeader header = new ProjectHeader(projectName, "January 2017", tags);
}

@section Title {@projectName}

<div class="card">
    @Html.Partial("Common/CardHeader.cshtml", header)
    <div class="card-body">
        @Html.Partial("Common/ParagraphStart.cshtml")
            After Microsoft released <a href="https://docs.microsoft.com/en-us/quantum/?view=qsharp-preview">Q#</a>, I spent some time investigating quantum computing.
            This is something that Microsoft's CEO <a href="https://www.amazon.com/dp/0062652508/ref=cm_sw_su_dp?tag=authorweb-20">emphasized</a> and 
            was a computational technology that I had a very limited knowledge of.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        <h3 class="text-muted">Applications</h3>
        @Html.Partial("Common/ParagraphStart.cshtml")
            There has already been a wealth of information written about what Quantum Computing can and cannot do -- a well-grounded article can be found
            <a href="http://www.cs.virginia.edu/~robins/The_Limits_of_Quantum_Computers.pdf">here</a>, with a small (understandable) demo 
            <a href="https://www.scottaaronson.com/blog/?p=208">here</a>.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
            In terms of actually understanding quantum computing, most of the technical documentation I have read -- such as
            Microsoft's <a href="https://docs.microsoft.com/en-us/quantum/quantum-concepts-1-intro?view=qsharp-preview">Q# documentation</a>
            or this whitepaper from <a href="https://arxiv.org/pdf/1708.03684.pdf">IBM</a> -- starts with such mathematical rigor that the core details slip past.
            This actually makes a lot of sense to me, because quantum computing performs a very specialized speedup of certain algorithms, using a significant
            amount of linear algebra. In fact, <a href="https://www.nist.gov/">NIST</a> has a whole <a href="https://math.nist.gov/quantum/zoo/">page</a> dedicated
            to cataloging what those speedups are.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
            However because quantum computing provides such a specialized performance enhancement, 99% of softare engineers will never need to know how quantum computing works.
            Once we have readily-available quantum computers, most engineers will access <i>algorithms</i> through external APIs such as 
            <a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Azure Cognitive Services</a>, not the raw quantum computing layer itself.
            Those software engineers that do need raw hardware access will either:
            <ul>
                <li><b>1 </b>Have an algorithm to that hasn't already been explored and enhanced.</li>
                <li><b>2 </b>Have a domain-specific problem that requires a new algorithm to speed up (See <b>1</b>)</li>
                <li><b>3 </b>Be reinventing the wheel.</li>
            </ul>
        @Html.Partial("Common/ParagraphEnd.cshtml")
        @Html.Partial("Common/ParagraphStart.cshtml")
            Without going into too much detail, quantum computers take in a N-bit <i>classical</i> and output an N-bit <i>classical</i> number. This means that most frontend
            engineers will never have to deal with quantum computing, and most backend engineers (unless they have specific algorithms to enhance) won't deal with quantum computing either.
            For the forseeable future (where quantum computers are expensive to use), most data-heavy applications <i>also</i> won't involve quantum computing due to the limited input / output of these devices.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        <h3 class="text-muted">Operation</h3>
        @Html.Partial("Common/ParagraphStart.cshtml")
            Despite all of the above, quantum computing is quite fascinating and a worthwhile technology to investigate.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
            At its core, a quantum computer simulates a quantum circuit. A quantum circuit takes in a N-bit <i>classical number</i>, performs a series of operations which 
            assign different probabilities to each of the 2<sup>N</sup> output possibilities, and measures the result, resulting in one of the 2<sup>N</sup> possible (classical) output values.
        @Html.Partial("Common/ParagraphEnd.cshtml")
            <br />
        @Html.Partial("Common/ParagraphStart.cshtml")
            What makes quantum computing interesting is that inside the quantum circuit, each bit is represented as 2-element 
            <a href="https://en.wikipedia.org/wiki/Vector_space">vector</a> of <a href="https://en.wikipedia.org/wiki/Complex_number">complex</a> numbers.
        @Html.Partial("Common/ParagraphEnd.cshtml")
        $$\vec{B(r)}=\frac{\mu_0}{4\pi}\sum\limits_{i}\frac{q_i\vec{v_i}\times\hat{R_i}}{R_i^2}$$
    </div>
</div>
        
@page
@using Helium.Pages.Projects.Shared
@model QuantumComputingModel

@{
    ViewData["Title"] = @Model.Card.Title;
}

<div class="container-fluid">
    <partial name="../Shared/CardHeader.cshtml" for="@Model" />
    <div class="card-body">
        <div class="row justify-content-center">
            <p>
                After Microsoft released <a href="https://docs.microsoft.com/en-us/quantum/?view=qsharp-preview">Q#</a>, I spent some time investigating quantum computing.
                This is something that Microsoft's CEO <a href="https://www.amazon.com/dp/0062652508/ref=cm_sw_su_dp?tag=authorweb-20">emphasized</a> and
                was a computational technology that I had a very limited knowledge of.
            </p>
            <h3 class="text-muted">Overview</h3>
            <p>
                There has already been a wealth of information written about what Quantum Computing can and cannot do -- a well-grounded article can be found
                <a href="http://www.cs.virginia.edu/~robins/The_Limits_of_Quantum_Computers.pdf">here</a>, with a small (understandable) demo
                <a href="https://www.scottaaronson.com/blog/?p=208">here</a>.
            </p>
            <br />
            <p>
                In terms of actually understanding quantum computing, most of the technical documentation I have read -- such as
                Microsoft's <a href="https://docs.microsoft.com/en-us/quantum/quantum-concepts-1-intro?view=qsharp-preview">Q# documentation</a>
                or this whitepaper from <a href="https://arxiv.org/pdf/1708.03684.pdf">IBM</a> -- starts with such mathematical rigor that the core details slip past.
                This actually makes a lot of sense to me, because quantum computing performs a very specialized speedup of certain algorithms, using a significant
                amount of linear algebra. In fact, <a href="https://www.nist.gov/">NIST</a> has a whole page (<a href="https://math.nist.gov/quantum/zoo/">https://math.nist.gov/quantum/zoo/</a>) dedicated
                to cataloging what those speedups are.
            </p>
            <br />
            <p>
                In a nutshell, quantum computers take in a N-bit classical input and return an N-bit classical output.
                However, because of the mathematical / quantum infrastructure between the input and the output, quantum computers can perform operations quickly which normal computers cannot perform quickly.
            </p>

            <br />
            <h3 class="text-muted">Career Applicability</h3>
            <p>
                Because quantum computing provides such a specialized performance enhancement, the majority of softare engineers will never need to know how quantum computing works.
                Once we have readily-available quantum computers, most engineers will access the algorithmic speedups they perform through external APIs such as
                <a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Azure Cognitive Services</a>, not the raw quantum computing layer itself.
                Those software engineers that do need raw hardware access will either be:
                <ul>
                    <li>Writing an algorithm to that hasn't already been explored and enhanced</li>
                    <li>Have a domain-specific problem that requires a new algorithm to speed up</li>
                    <li>Be reinventing the wheel.</li>
                </ul>
                In particular, frontend engineers will never have to deal with quantum computing, and most backend engineers (unless they have specific algorithms to enhance) won't deal with quantum computing either.
                For the forseeable future (where quantum computers are expensive to use), most data-heavy applications also won't involve quantum computing due to the limited input / output rate of these devices.
            </p>

            <br />
            <h3 class="text-muted">Learning More</h3>
            <p>
                With all of this information then, why should software engineers investigate quantum computing now?

            </p>
            <p>
                Personally, I feel that software engineers should know more about quantum computing so they can answer questions from their family and friends in an informed manner.
                Being able to frankly and honestly answer these questions will help repair the lack of trust the public has towards computing technology.
                <br />
                Additionally, in a future where quantum computing is mainstream knowing the basics of quantum computing becomes similar to knowing the basics of assembly language today.
                The majority of software engineers do not need to know assembly language, but knowing the basics of assembly language provides us with a wealth of understanding not possible without that knowledge.
                <br />
                Finally, quantum computing <u>will</u> provide algorithmic speedups to key domain-specific problems in several fields, substantially impacting global technological development.
            </p>

            <p>
                To learn more, I'd recommend taking a look at <a href="http://www.sci.brooklyn.cuny.edu/~noson/introQC.pdf">http://www.sci.brooklyn.cuny.edu/~noson/introQC.pdf </a> and Q#.
                <br />
                Additionally, if you'd like a more mathematical introduction, see <a href="https://arxiv.org/pdf/1708.03684.pdf">https://arxiv.org/pdf/1708.03684.pdf</a>.
            </p>
        </div>
    </div>
</div>
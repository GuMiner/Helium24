@page "{gitHubPageName}"
@model GitHubModel

@{
    string generalError = "generalError";
    string contentHolder = "contentHolder";
    ViewData["Title"] = @Model.Title;
}

<div class="card">
    <partial name="Common/CardHeader.cshtml" for="@Model" />
    <div class="card-body">
        <div class="alert-warning" id="@generalError" role="alert"></div>
        <div class="row justify-content-center">
            <div class="col text-muted" >
                <i>Rendered content from <a href="@Model.ProjectUri">@Model.ProjectUri</a></i>
            </div>
        </div>
        <div id="@contentHolder"></div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript" src="~/Lib/es6-promise-auto-4.2/es6-promise.auto.min.js"></script>
    <script type="text/javascript" src="~/Lib/axios-0.17/axios.min.js"></script>

    <!-- Given a markdown page, dynamically render it! -->
    <script type="text/javascript">

        // Finds and updates links ([]() or [] ()), returning the updated line
        function ReplaceLinks(line) {
            line = ReplaceLinksWithSeparator(line, "](")
            line = ReplaceLinksWithSeparator(line, "] (");
            return line;
        }

        // Converts relative links to links
        function ConvertRelativeLinkToLink(link) {
            if (link.startsWith(".")) {
                // Relative link
                // https://github.com/GuMiner/TopographicRasterizer/blob/master/Example/Example.md
                // https://raw.githubusercontent.com/GuMiner/TopographicRasterizer/master/README.md
                link = ConvertRelativeLinkToRawLink(link);
                link = link.replace("master/", "blob/master/");
                link = link.replace("raw.githubusercontent", "github");
            }

            return link;
        }

        // Converts relative links to GitHub raw direct links
        function ConvertRelativeLinkToRawLink(link) {
            link = link.substring(1);
            var baseUri = "@Model.ProjectUri";
            baseUri = baseUri.substring(0, baseUri.lastIndexOf('/'))
            return baseUri + link;
        }

        // More specific version of ReplaceLinks(...)
        function ReplaceLinksWithSeparator(line, separator) {
            var linkIndex = line.indexOf(separator);
            while (linkIndex != -1) {
                // We found something that looks like a link (the '](' in '[]()')
                var isHtmlLink = true;
                var startIndex = line.lastIndexOf("[", linkIndex);
                if (startIndex != 0 && line[startIndex - 1] == '!') {
                    // It is an image!
                    isHtmlLink = false;
                }

                var endIndex = line.indexOf(")", linkIndex);

                var htmlLink = line.substring(linkIndex + separator.length, endIndex);
                var linkText = line.substring(startIndex + 1, linkIndex);
                var formattedLink = isHtmlLink ?
                    ('<a href="' + ConvertRelativeLinkToLink(htmlLink) + '">' + linkText + '</a>') :
                    ('<img src="' + ConvertRelativeLinkToRawLink(htmlLink) + '" alt="' + linkText + '"/>');

                line = line.substring(0, startIndex + (isHtmlLink ? 0 : -1)) + formattedLink + line.substring(endIndex + 1);

                linkIndex = line.indexOf(separator);
            }

            return line;
        }

        function IsListItem(line)
        {
            return line.startsWith("* ");
        }

        function ApplyBoldAndItalics(line) {
            line = ApplyTagWrappedFormatting(line, "**", "b");
            line = ApplyTagWrappedFormatting(line, "*", "i");
            line = ApplyTagWrappedFormatting(line, "_", "i");
            return line;
        }

        // Applies any formatting of values wrapped with tags
        function ApplyTagWrappedFormatting(line, asterisks, tag)
        {
            return ApplyRecursiveSubstringFormatting(line, asterisks, `<${tag}>`, `</${tag}>`);
        }

        function ApplyRecursiveSubstringFormatting(line, subpart, startTag, endTag)
        {
            var firstIndex = line.indexOf(subpart);
            while (firstIndex != -1) {
                var secondIndex = line.indexOf(subpart, firstIndex + subpart.length);
                if (secondIndex != -1) {
                    line =
                        line.substring(0, firstIndex) +
                        startTag + line.substring(firstIndex + subpart.length, secondIndex) + endTag +
                        line.substring(secondIndex + subpart.length);
                    firstIndex = line.indexOf(subpart, secondIndex + subpart.length);
                } else {
                    firstIndex = -1;
                }
            }

            return line;
        }

        // Converts '#' to #### to h2-h5, returning the result.
        function ApplyHashtagHeaders(line)
        {
            var header = "";
            if (line.startsWith("# ")) {
                line = line.substring(2);
                header = "h2";
            } else if (line.startsWith("## ")) {
                line = line.substring(3);
                header = "h3";
            } else if (line.startsWith("### ")) {
                line = line.substring(4);
                header = "h4";
            } else if (line.startsWith("#### ")) {
                line = line.substring(5);
                header = "h5";
            }

            if (header != "") {
                line = `<${header}>${line}</${header}>`;
            }

            return line;
        }

        function ApplyCodeFormatting(line, codeLang) {
            if (codeLang == "csharp") {
                var spaceCount = 0;
                while (spaceCount < line.length && (line[spaceCount] == ' ' || line[spaceCount] == '\t')) {
                    ++spaceCount;
                }

                while (spaceCount > 0) {
                    line = `&nbsp;&nbsp;&nbsp;${line}`
                    --spaceCount;
                }

                line = ReplaceWellKnownCSharpWords(line);
                line = ReplaceNumbers(line);
                line = ApplyRecursiveSubstringFormatting(line, '"', "<span class='text-danger'>''", '\'\'</span>');
                
                var commentIndex = line.indexOf("//");
                if (commentIndex != -1) {
                    line = `${line.substring(0, commentIndex)} <span class='text-success'>${line.substring(commentIndex)}</span>`
                }
            }

            return line + "<br />";
        }

        function ReplaceWellKnownCSharpWords(line) {
            var primaryWords = [
                "await",
                "new ",
                "null",
                "return ",
                "string",
                "this.",
                "true",
                "using ",
                "while"];
            for (var i in primaryWords) {
                line = ColorWord(line, primaryWords[i], "text-primary");
            }
            return line;
        }

        function ReplaceNumbers(line) {
            line = ColorWord(line, "9", "text-warning");
            line = ColorWord(line, "8", "text-warning");
            line = ColorWord(line, "7", "text-warning");
            line = ColorWord(line, "6", "text-warning");
            line = ColorWord(line, "5", "text-warning");
            line = ColorWord(line, "4", "text-warning");
            line = ColorWord(line, "3", "text-warning");
            line = ColorWord(line, "2", "text-warning");
            line = ColorWord(line, "1", "text-warning");
            line = ColorWord(line, "0", "text-warning");
            return line;
        }

        function ColorWord(line, word, color)
        {
            return line.replace(word, `<span class='${color}'>${word}</span>`)
        }

        $(document).ready(function () {

            // Load POI types and populate the first listing of POI types
            axios.get('@Model.ProjectUri')
                .then(function (response) {
                    var data = response.data;

                    // Render what we got back first, in case we hit parsing errors
                    $("#@contentHolder").html(function (n) {
                        return data;
                    })

                    var markdown = new Array();
                    var currentLine = "";
                    var inList = false;

                    var inCode = false;
                    var codeLang = "";

                    data += "\n"; // Throw in a newline to avoid end-of-line processing
                    for (var i = 0; i < data.length; i++)
                    {
                        switch(data[i])
                        {
                            case '\r':
                                break;
                            case '\n':
                                // Headers, footers, and code
                                if (currentLine.startsWith("==") && currentLine.endsWith("==")) {
                                    markdown[markdown.length - 1] = "<h2 class=\"text-muted\">" + markdown[markdown.length - 1] + "</h2>";
                                } else if (currentLine.startsWith("--") && currentLine.endsWith("--")) {
                                    markdown[markdown.length - 1] = "<h3 class=\"text-muted\">" + markdown[markdown.length - 1] + "</h3>";
                                } else if (currentLine.startsWith("```")) {
                                    if (inCode) {
                                        markdown.push("</div></div>");
                                        inCode = false;
                                    } else {
                                        markdown.push('<div class="card"><div class="card-body">');
                                        inCode = true;
                                        codeLang = currentLine.substring(3).trim();
                                    }
                                } else if (inCode) {
                                    currentLine = ApplyCodeFormatting(currentLine, codeLang);
                                    markdown.push(currentLine);
                                }
                                else {
                                    var isListItem = IsListItem(currentLine)
                                    if (isListItem) {
                                        currentLine = currentLine.substring(2);
                                    }

                                    currentLine = ReplaceLinks(currentLine);
                                    currentLine = ApplyBoldAndItalics(currentLine);
                                    currentLine = ApplyHashtagHeaders(currentLine);

                                    
                                    if (inList && !isListItem) {
                                        markdown.push("</ul>")
                                        inList = false
                                    } else if (!inList && isListItem) {
                                        markdown.push("<ul>")
                                        inList = true
                                    }

                                    if (isListItem) {
                                        currentLine = "<li>" + currentLine + "</li>";
                                    } else {
                                        currentLine += "<br />";
                                    }

                                    markdown.push(currentLine);
                                }

                                currentLine = "";
                                break;
                            default:
                                currentLine += data[i];
                                break;
                        }
                    }

                    // Render the final markdown result.
                    $("#@contentHolder").html(function (n) {
                        return markdown.join("\n");
                    })
                })
                .catch(function (response) {
                    $("#@generalError").text(response.message);
                });
        });
    </script>
}